{
    "imports": [
        "github.com/project-flogo/flow",
		"github.com/TIBCOSoftware/labs-air-contrib/activity/error",
        "github.com/project-flogo/flow/activity/subflow",
        "github.com/project-flogo/contrib/activity/actreturn",
        "github.com/project-flogo/contrib/function/string",
        "github.com/project-flogo/contrib/function/array",
        "github.com/TIBCOSoftware/labs-lightcrane-contrib/activity/httpclient",
        "github.com/TIBCOSoftware/labs-air-contrib/activity/log",
        "github.com/TIBCOSoftware/labs-lightcrane-contrib/activity/mapping",
        "github.com/TIBCOSoftware/labs-air-contrib/function/air"
    ],
    "resources": [
        {
            "id": "flow:Pipe",
            "data": {
                "name": "Pipe",
                "description": "3",
                "links": [
                    {
                        "id": 1,
                        "from": "Log",
                        "to": "CheckServiceType",
                        "type": "default"
                    },
                    {
                        "id": 2,
                        "from": "CheckServiceType",
                        "to": "LogPassThrough",
                        "type": "expression",
                        "label": "CheckServiceTypeto",
                        "value": "false==$activity[CheckServiceType].Data.IsNotificationListener||false==$activity[CheckServiceType].Data.IsNotification"
                    },
                    {
                        "id": 3,
                        "from": "LogPassThrough",
                        "to": "Next_Flow_3",
                        "type": "default"
                    },
                    {
                        "id": 4,
                        "from": "Next_Flow_3",
                        "to": "Return1",
                        "type": "default"
                    },
                    {
                        "id": 5,
                        "from": "CheckServiceType",
                        "to": "LogNotification",
                        "type": "exprOtherwise",
                        "label": "CheckServiceTypetoReturn"
                    },
                    {
                        "id": 6,
                        "from": "LogNotification",
                        "to": "LogCommand",
                        "type": "expression",
                        "label": "LogCommandtoSendCommand",
                        "value": "\"Command\"==$flow.enriched[0].value"
                    },
                    {
                        "id": 7,
                        "from": "LogCommand",
                        "to": "SendCommand",
                        "type": "default"
                    },
                    {
                        "id": 8,
                        "from": "SendCommand",
                        "to": "Return2",
                        "type": "default"
                    },
                    {
                        "id": 9,
                        "from": "LogNotification",
                        "to": "LogIgnore",
                        "type": "exprOtherwise",
                        "label": "LogCommand to Return3"
                    },
                    {
                        "id": 10,
                        "from": "LogIgnore",
                        "to": "Return3",
                        "type": "default"
                    }
                ],
                "tasks": [
                    {
                        "id": "Log",
                        "name": "Log",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "=$property[\"${{ID}}$Logging.LogLevel\"]",
                                "flowInfo": false,
                                "message": "=string.concat(\"########## Pipe ########## : gateway = \", $flow.gateway, \", reading = \", coerce.toString($flow.reading), \", enriched = \", coerce.toString($flow.enriched))"
                            }
                        }
                    },
                    {
                        "id": "CheckServiceType",
                        "name": "CheckServiceType",
                        "description": "Mapping field from input to output",
                        "activity": {
                            "ref": "#mapping",
                            "settings": {
                                "IsArray": false,
                                "MappingFields": "[{\"Name\":\"IsNotification\",\"Type\":\"Boolean\"},{\"Name\":\"IsNotificationListener\",\"Type\":\"Boolean\"}]"
                            },
                            "input": {
                                "Mapping": {
                                    "mapping": {
                                        "IsNotificationListener": "=$property[\"${{ID}}$App.IsListener\"]",
                                        "IsNotification": "=0<array.count($flow.enriched)&&\"Notification\"==$flow.enriched[0].name"
                                    }
                                }
                            },
                            "schemas": {
                                "input": {
                                    "Mapping": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"IsNotification\":{\"type\":\"boolean\"},\"IsNotificationListener\":{\"type\":\"boolean\"},\"SkipCondition\":{\"type\":\"boolean\"}}}",
                                        "fe_metadata": "{\"IsNotification\":true,\"IsNotificationListener\":true,\"SkipCondition\":false}"
                                    }
                                },
                                "output": {
                                    "Data": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"IsNotification\":{\"type\":\"boolean\"},\"IsNotificationListener\":{\"type\":\"boolean\"}}}",
                                        "fe_metadata": "{\"IsNotification\":true,\"IsNotificationListener\":true}"
                                    }
                                },
                                "settings": {
                                    "MappingFields": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"Name\":{\"type\":\"string\"},\"Type\":{\"type\":\"string\"}},\"required\":[\"Name\",\"Type\"]}}",
                                        "fe_metadata": "[{\"Name\":\"IsNotification\",\"Type\":\"Boolean\"},{\"Name\":\"IsNotificationListener\",\"Type\":\"Boolean\"}]"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogPassThrough",
                        "name": "LogPassThrough",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "=$property[\"${{ID}}$Logging.LogLevel\"]",
                                "flowInfo": false,
                                "message": "*** Passing Through ***"
                            }
                        }
                    },
                    {
                        "id": "Return1",
                        "name": "Return1",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn"
                        }
                    },
                    {
                        "id": "LogNotification",
                        "name": "LogNotification",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "=$property[\"${{ID}}$Logging.LogLevel\"]",
                                "flowInfo": false,
                                "message": "*** Notification ***"
                            }
                        }
                    },
                    {
                        "id": "LogCommand",
                        "name": "LogCommand",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "=$property[\"${{ID}}$Logging.LogLevel\"]",
                                "flowInfo": false,
                                "message": "(Command)"
                            }
                        }
                    },
                    {
                        "id": "SendCommand",
                        "name": "SendCommand",
                        "description": "This activity build docker image from Dockerfile",
                        "activity": {
                            "ref": "#httpclient",
                            "settings": {
                                "method": "PUT",
                                "timeout": "1500",
                                "urlMappingString": "",
                                "urlMapping": "",
                                "leftToken": "$",
                                "rightToken": "$",
                                "variablesDef": "",
                                "httpHeaders": "[{\"Key\":\"Content-Type\",\"Value\":\"application/json; charset=utf-8\"},{\"Key\":\"Accept\",\"Value\":\"application/json\"}]"
                            },
                            "input": {
                                "URL": "=$property[\"${{ID}}$EdgeX.URL\"]",
                                "Body": "=air.airdataselector($flow.gateway, $flow.reading, $flow.enriched, $property[\"${{ID}}$EdgeX.Command\"])",
                                "SkipCondition": false
                            }
                        }
                    },
                    {
                        "id": "Return2",
                        "name": "Return2",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn"
                        }
                    },
                    {
                        "id": "LogIgnore",
                        "name": "LogIgnore",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "=$property[\"${{ID}}$Logging.LogLevel\"]",
                                "flowInfo": false,
                                "message": "(Ignore)"
                            }
                        }
                    },
                    {
                        "id": "Return3",
                        "name": "Return3",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn"
                        }
                    }
                ],
                "metadata": {},
				 "errorHandler": {}
            }
        }
    ],
    "properties": [
        {
            "name": "${{ID}}$Logging.LogLevel",
            "type": "string",
            "value": "INFO"
        },
        {
            "name": "${{ID}}$App.ComponentName",
            "type": "string",
            "value": "NA"
        },
        {
            "name": "App.NotificationListeners",
            "type": "string",
            "value": "[]"
        },
        {
            "name": "${{ID}}$EdgeX.Command",
            "type": "string",
            "value": "{\"ledBody\":{\"Led\":@rule..actionValue@}}"
        },
        {
            "name": "${{ID}}$EdgeX.URL",
            "type": "string",
            "value": "NA"
        }
    ],
    "connections": {},
    "contrib": []
}