{
    "imports": [
        "github.com/project-flogo/flow",
		"github.com/TIBCOSoftware/labs-air-contrib/activity/error",
        "github.com/project-flogo/contrib/activity/actreturn",
        "github.com/project-flogo/contrib/function/string",
        "github.com/TIBCOSoftware/labs-air-contrib/activity/log",
        "github.com/TIBCOSoftware/labs-air-contrib/activity/dataselector",
        "github.com/TIBCOSoftware/labs-lightcrane-contrib/activity/mapping",
        "github.com/TIBCOSoftware/labs-air-contrib/function/air"
    ],
    "resources": [
        {
            "id": "flow:DataSelector",
            "data": {
                "name": "DataSelector",
                "description": "",
                "links": [
                ],
                "tasks": [
                    {
                        "id": "LogMessage",
                        "name": "LogMessage",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "=$property[\"${{ID}}$Logging.LogLevel\"]",
                                "flowInfo": false,
                                "message": "=string.concat(\"########## DataStore_1(PostgreSQL2) ########## : gateway = \", $flow.gateway, \", reading = \", coerce.toString($flow.reading), \", enriched = \", coerce.toString($flow.enriched))"
                            }
                        }
                    },
                    {
                        "id": "DataSelector",
                        "name": "DataSelector",
                        "description": "This activity select datas from array",
                        "activity": {
                            "ref": "#dataselector",
                            "settings": {
                                "targets": "[{\"Name\":\"Value\",\"FieldMatch\":\"$Value$\",\"Type\":\"String\"}]",
                                "leftToken": "$",
                                "rightToken": "$",
                                "variablesDef": "[{\"Name\":\"Value\",\"Type\":\"String\"}]"
                            },
                            "input": {
                                "DataCollection": "=air.airdata2collection(air.modifyobject(air.modifyobject(air.json2object(\"{}\"), \"gateway\", $flow.gateway), \"reading\", $flow.reading), $flow.enriched)",
                                "Variables": {
                                    "mapping": {
                                        "Value": "=$property[\"${{ID}}$Test.TargetField\"]"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "TransformData",
                        "name": "TransformData",
                        "description": "Mapping field from input to output",
                        "activity": {
                            "ref": "#mapping",
                            "settings": { 
                                "IsArray": false,
                                "MappingFields": "[{\"Name\":\"ResourceID\",\"Type\":\"String\"},{\"Name\":\"Value\",\"Type\":\"String\"}]"
                            },
                            "input": {
                                "Mapping": {
                                    "mapping": {
                                        "ResourceID": "=air.ternary(\"f1..value\"==$property[\"${{ID}}$Test.TargetField\"], $flow.reading.name, string.concat($flow.reading.name, string.substring($property[\"${{ID}}$Test.TargetField\"],string.lastIndex($property[\"${{ID}}$Test.TargetField\"], \".\"),string.length($property[\"${{ID}}$Test.TargetField\"])-string.lastIndex($property[\"${{ID}}$Test.TargetField\"], \".\"))))",
                                        "Value": "=air.ternary(\n    $property[\"${{ID}}$Test.EscapeDoubleQuote\"], \n    string.replaceAll(string.replaceAll($activity[DataSelector].ExtractedData.Value, \"\\\\\", \"\\\\\\\\\"), \"\\\"\", \"\\\\\\\"\"), \n    $activity[DataSelector].ExtractedData.Value)"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogSelector",
                        "name": "LogSelector",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=string.concat(\"*** Activity Selection *** New Value = \", $activity[DataSelector].ExtractedData.Value, \", New ResourceID = \", $activity[TransformData].Data.ResourceID)"
                            }
                        }
                    },
                    {
                        "id": "DataSelectorFunction",
                        "name": "DataSelectorFunction",
                        "description": "Mapping field from input to output",
                        "activity": {
                            "ref": "#mapping",
                            "settings": {
                                "IsArray": false,
                                "MappingFields": "[{\"Name\":\"PublishData\",\"Type\":\"String\"}]"
                            },
                            "input": {
                                "Mapping": {
                                    "mapping": {
                                        "PublishData": "=air.json2object(\n    air.airdataselector(\n        $flow.gateway, \n        air.modifyobject(\n            air.modifyobject(\n                $flow.reading, \n                \"value\", \n                $activity[TransformData].Data.Value), \n            \"name\", \n            $activity[TransformData].Data.ResourceID), \n        $flow.enriched, \n        $property[\"${{ID}}$Test.PublishData\"]))"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogSelectorFunction",
                        "name": "LogSelectorFunction",
                        "description": "Simple Log Message Activity",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=string.concat(\"*** Function Replacement *** Publish Data = \", $activity[DataSelectorFunction].Data.PublishData)"
                            }
                        }
                    },
                    {
                        "id": "Return",
                        "name": "Return",
                        "description": "Simple Return Activity",
                        "activity": {
                            "ref": "#actreturn"
                        }
                    }
                ],
                "metadata": {},
				 "errorHandler": {}
            }
        }
    ],
    "properties": [
        {
            "name": "${{ID}}$Logging.LogLevel",
            "type": "string",
            "value": "DEBUG"
        },
        {
            "name": "${{ID}}$Test.TargetField",
            "type": "string",
            "value": "f1..value"
        },
        {
            "name": "${{ID}}$Test.PublishData",
            "type": "string",
            "value": "{ \"id\": \"@f1..id@\", \"source\": \"@f1..source@\", \"deviceName\": \"@f1..deviceName@\", \"gateway\": \"@f1..gateway@\", \"readings\": [{\"id\": \"@f1..id@\", \"origin\": \"@f1..origin@\", \"deviceName\": \"@f1..deviceName@\", \"resourceName\": \"@f1..resourceName@\", \"value\": \"@f1..value@\", \"valueType\": \"@f1..valueType@\", \"mediaType\": \"@f1..mediaType@\"}]}"
        },
        {
            "name": "${{ID}}$Test.EscapeDoubleQuote",
            "type": "boolean",
            "value": true
        }
    ],
    "connections": {},
    "contrib": []
}